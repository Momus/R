    summaryout <- LD_subject$data %>%
        spread(key=room, value=value)%>%
        select(-timepoint) %>%
        group_by(visit) %>%
        summarise_each(funs(no_na_mean))

    ## We still need to mangle it some more in it's very own print
    ## function, so let's give it some class, and let it remember it's ID
    class(summaryout) <- append(class(summaryout), "SubjectSummary")
    attr(summaryout,"ID") <- LD_subject$ID
    
    summaryout
}
sub54sum <- sub54 %>% summary
sub54sum
attributes(sub54sum)
sub54sum$ID
sub54sum$`ID`
atr(sub54sum, `ID`)
attr(sub54sum, `ID`)
attr(sub54sum, "ID")
str(sub54sum, "ID")
str(sub54sum)
str(sub54)
str(sub54sum)
attr(sub54sum, `ID`)
attr(sub54sum, "ID:") <-  54
attr(sub54sum, `ID`)
attr(sub54sum, `ID:`)
attr(sub54sum, "ID:")
class(sub54sum)

print.SubjectSummary <- function(LD_SubjectSummary){
    
    ## Replace NaN's with NA's
    summaryout <- LD_SubjectSummary[sapply(LD_SubjectSummary, is.na)] = NA
    
    ## Print it like the model
    cat("ID: ", attr(summaryout, "ID"), "\n")
    as.data.frame(summaryout)
}

print(sub54sum)
print.SubjectSummary(sub54sum)
print.SubjectSummary <- function(LD_SubjectSummary){
    
    ## Replace NaN's with NA's
    summaryout <- LD_SubjectSummary[sapply(LD_SubjectSummary, is.na)] = NA
    
    ## Print it like the model
    cat("ID: ", attr(summaryout, "ID"), "\n")
    as.data.frame(summaryout)
}

print.SubjectSummary(sub54sum)

print.SubjectSummary <- function(LD_SubjectSummary){
    
    ## Replace NaN's with NA's
    summaryout <- (LD_SubjectSummary[sapply(LD_SubjectSummary, is.na)] = NA)
    
    ## Print it like the model
    cat("ID: ", attr(summaryout, "ID"), "\n")
    as.data.frame(summaryout)
}
print.SubjectSummary(sub54sum)
sub45sum
atr(sub45sum, "ID")
attr(sub45sum, "ID")
sub45sum
sub45sum <- summary(sub54)
sub45sum

summary.subject <-  function(LD_subject){
    no_na_mean <-
        partial(mean, na.rm=TRUE)
    
    
    summaryout <- LD_subject$data %>%
        spread(key=room, value=value)%>%
        select(-timepoint) %>%
        group_by(visit) %>%
        summarise_each(funs(no_na_mean))

    ## We still need to mangle it some more in it's very own print
    ## function, so let's give it some class, and let it remember it's ID
    class(summaryout) <- append(class(summaryout), "SubjectSummary")
    attr(summaryout,"ID") <- LD_subject$ID
    
    summaryout
}
sub45sum <- summary(sub54)
sub45sum
print.SubjectSummary(sub45sum)
as.data.frame(sub45sum)
print(as.data.frame(sub45sum))
class(print(as.data.frame(sub45sum)))


 (sub45sum[sapply(sub45sum, is.na)] = NA)
 sub45sum[sapply(sub45sum, is.na)] = NA
noNA <- sub45sum[sapply(sub45sum, is.na)] = NA
noNA <- (sub45sum[sapply(sub45sum, is.na)] = NA)
noNA
print (sub45sum[sapply(sub45sum, is.na)] = NA)
print(sub45sum[sapply(sub45sum, is.na)] = NA)
    sub45sum[sapply(sub45sum, is.na)] = NA
sub45sum

print.SubjectSummary <- function(LD_SubjectSummary){
    
    ## Replace NaN's with NA's
    LD_SubjectSummary[sapply(LD_SubjectSummary, is.na)] = NA
    
    ## Print it like the model
    cat("ID: ", attr(LD_SubjectSummary, "ID"), "\n")
    as.data.frame(LD_SubjectSummary)
}
print.SubjectSummary(sub45sum)
sub54sum
pritn(sub54sum)
print(sub54sum)
class(sub54sum)
class(sub54sum)[1]
?append
a <- c(1,2,3,4)
a
append(a, 5, after=0)

summary.subject <-  function(LD_subject){
    no_na_mean <-
        partial(mean, na.rm=TRUE)
    
    
    summaryout <- LD_subject$data %>%
        spread(key=room, value=value)%>%
        select(-timepoint) %>%
        group_by(visit) %>%
        summarise_each(funs(no_na_mean))

    ## We still need to mangle it some more in its very own print
    ## function, so let's give it some class, and let it remember it's ID
    ## New class must be at front of list to use its special function.
    class(summaryout) <- append(class(summaryout), "SubjectSummary", after=0)
    attr(summaryout,"ID") <- LD_subject$ID
    
    summaryout
}
sub45sum <- summary(sub54)
sub45sum
print.SubjectSummary <- function(LD_SubjectSummary){
    
    ## Replace NaN's with NA's
    LD_SubjectSummary[sapply(LD_SubjectSummary, is.na)] = NA
    
    ## Print it like the model
    cat("ID: ", attr(LD_SubjectSummary, "ID"), "\n")
    print(as.data.frame(LD_SubjectSummary))
}
sub45sum

print.SubjectSummary <- function(LD_SubjectSummary){
    
    ## Replace NaN's with NA's
    LD_SubjectSummary[sapply(LD_SubjectSummary, is.na)] = NA
    
    ## Print it like the model
    cat("ID: ", attr(LD_SubjectSummary, "ID"), "\n")
    print.data.frame(LD_SubjectSummary)
}
sub45sum
print(sub45sum)
sub45sum$office
class(sub45sum)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
out
print(out)
class(out)
randomsummary <- summary(x)
class(randomsummary)
class(x)
head(randomsummary)
randomsummary
x
class(randomsummary)

make_LD <- function(LD_tibble){
    structure(list(data = LD_tibble),
              class = "LongitudinalData")
}


print.LongitudinalData <- function(LDobj){
    
    number_subjects <-  length(table(factor((LDobj$data)$id)))
    
    cat("Longitudinal dataset with ",
        number_subjects,
        " subjects\n" )
}
              

subject <- function(LD_obj, pt_id){
    data <- LD_obj$data %>%
        filter(`id` == pt_id) %>%
        select(-`id`)
    
    structure(list(data = data,
                   "ID" = pt_id),
              class = "subject")
}

print.subject <-  function(LD_subject){
    if (is.na(LD_subject$data[1,1])) return(NULL)
    else cat("Subject ID: ", LD_subject$ID, "\n")
}


summary.subject <-  function(LD_subject){
    no_na_mean <-
        partial(mean, na.rm=TRUE)
    
    summaryout <- LD_subject$data %>%
        spread(key=room, value=value)%>%
        select(-timepoint) %>%
        group_by(visit) %>%
        summarise_each(funs(no_na_mean))

    ## We still need to mangle it some more in its very own print
    ## function, so let's give it some class, and let it remember it's ID
    class(summaryout) <- append(class(summaryout)
                             , "SubjectSummary"
                             , after=0) # New class must be at front
                                        # of vector to use its special
                                        # function.

    attr(summaryout,"ID") <- LD_subject$ID
    
    summaryout
}


print.SubjectSummary <- function(LD_SubjectSummary){
    
    ## Replace NaN's with NA's
    LD_SubjectSummary[sapply(LD_SubjectSummary, is.na)] = NA
    
    ## Print it like the model
    cat("ID: ", attr(LD_SubjectSummary, "ID"), "\n")
    print.data.frame(LD_SubjectSummary)
}



visit <- function(LD_subject, visit_number){
    data <- LD_subject$data %>%
        filter(`visit` == visit_number) %>%
        select(-`visit`)
    
    structure(list(data = data,
                   "ID" = LD_subject$ID,
                   "Visit" = visit_number),
              class = "visit")
}

room <- function(LD_visit, room){
    data <- LD_visit$data %>%
        filter(`room` == room) %>%
        select(-`room`)
    
        structure(list(data = data,
                       "ID" = LD_visit$ID,
                       "Visit" = LD_visit$Visit,
                       "Room" = room),
                  class = "room")
}


print.room <- function(LD_room){
    cat("ID: ", LD_room$ID, "\n")
    cat("Visit: ", LD_room$Visit, "\n")
    cat("Room: ", LD_room$Room, "\n")
}


summary.room <- function(LD_room){
    room_out <- LD_room
    room_out$data <- (room_out$data)$value  %>% summary
    class(room_out) <- append(class(room_out)
                             , "RoomSummary"
                             , after=0)
    room_out
}


print.RoomSummary <- function(RoomSummary){
    cat("ID: ", RoomSummary$ID, "\n")
    print.table(RoomSummary)
}

> 
> source("oop_code.R")
source("oop_code.R")
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
out <- subject(x, 10)
out
print(out)
out <- subject(x, 54) %>% summary
out <- subject(x, 54)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)

print.RoomSummary <- function(RoomSummary){
    cat("ID: ", RoomSummary$ID, "\n")
    print.table(RoomSummary$data)
}
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)

print.RoomSummary <- function(RoomSummary){
    cat("ID: ", RoomSummary$ID, "\n")
    RoomSummary$data
}
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
out
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("bedroom")
bed <- subject(x, 44) %>% visit(1) %>% room("bedroom")
bed
bed$data
lroom <- subject(x, 44) %>% visit(1) %>% room("livingroom")
lroom
lroom$data

room <- function(LD_visit, room){
    new_data <- LD_visit$data %>%
        filter(`room` == room) %>%
        select(-`room`)
    
        structure(list(data = new_data,
                       "ID" = LD_visit$ID,
                       "Visit" = LD_visit$Visit,
                       "Room" = room),
                  class = "room")
}
lroom <- subject(x, 44) %>% visit(1) %>% room("livingroom")
bed <- subject(x, 44) %>% visit(1) %>% room("bedroom")
lroom$data
bed$data

room <- function(LD_visit, room){
    new_data <- (LD_visit$data %>%
                filter(`room` == room) %>%
                select(-`room`))
    
        structure(list(data = new_data,
                       "ID" = LD_visit$ID,
                       "Visit" = LD_visit$Visit,
                       "Room" = room),
                  class = "room")
}
bed <- subject(x, 44) %>% visit(1) %>% room("bedroom")
lroom <- subject(x, 44) %>% visit(1) %>% room("livingroom")
bed$data
lroom$data
lroom == bed
lroom$data == bed$data

room <- function(LD_visit, room){
    new_data <- (LD_visit$data %>%
                filter(`room` == room)) #$%>%
                #select(-`room`))
    
        structure(list(data = new_data,
                       "ID" = LD_visit$ID,
                       "Visit" = LD_visit$Visit,
                       "Room" = room),
                  class = "room")
}
lroom <- subject(x, 44) %>% visit(1) %>% room("livingroom")
bed <- subject(x, 44) %>% visit(1) %>% room("bedroom")
head(lroom$data == bed$data)
room <- function(LD_visit, room_num){
    new_data <- (LD_visit$data %>%
                filter(`room` == room_num)) #$%>%
                #select(-`room`))
    
        structure(list(data = new_data,
                       "ID" = LD_visit$ID,
                       "Visit" = LD_visit$Visit,
                       "Room" = room),
                  class = "room")
}
bed <- subject(x, 44) %>% visit(1) %>% room("bedroom")
lroom <- subject(x, 44) %>% visit(1) %>% room("livingroom")
head(lroom$data == bed$data)
head(lroom$data)
head(bed$data)
bed$data
lroom
lroom$data
 out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
 out <- subject(x, 44) %>% visit(1) %>% room("bedroom") %>% summary
print(out)
 out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)

room <- function(LD_visit, room_name){
    new_data <- (LD_visit$data %>%
                filter(`room` == room_name)) $%>%
                select(-`room`))
    
        structure(list(data = new_data,
                       "ID" = LD_visit$ID,
                       "Visit" = LD_visit$Visit,
                       "Room" = room),
                  class = "room")
}
room <- function(LD_visit, room_name){
    new_data <- (LD_visit$data %>%
                filter(`room` == room_name) $%>%
                select(-`room`))
    
        structure(list(data = new_data,
                       "ID" = LD_visit$ID,
                       "Visit" = LD_visit$Visit,
                       "Room" = room),
                  class = "room")
}

room <- function(LD_visit, room_name){
    new_data <- (LD_visit$data %>%
                filter(`room` == room_name) %>%
                select(-`room`))
    
    structure(list(data = new_data,
                       "ID" = LD_visit$ID,
                       "Visit" = LD_visit$Visit,
                       "Room" = room),
                  class = "room")
}
 out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
quit()
n
library(readr)
library(magrittr)
source("oop_code.R")
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
 print(out)
out <- subject(x, 14) %>% summary
 print(out)
 out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
source("oop_code.R")
 out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
require(purrr)
require(shurrr)
0 > "a"
quit()
n
